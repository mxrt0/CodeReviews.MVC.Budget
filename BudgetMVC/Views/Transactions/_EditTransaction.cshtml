@model EditTransactionViewModel
@{
    CultureInfo culture = Model.CurrentTransaction?.Currency switch
    {
        "EUR" => new CultureInfo("en-IE"),
        "GBP" => new CultureInfo("en-GB"),
        _ => new CultureInfo("en-US")
    };
}
<div class="modal fade" id="editTransactionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="editTransactionLabel">Edit Transaction</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editForm" asp-action="Edit" asp-route-id="@Model.CurrentTransaction!.Id" method="post" class="row g-3">
                    <div class="col-12">
                        <label asp-for="NewTransaction.Date" class="form-label">Date</label>
                        <input asp-for="NewTransaction.Date" class="form-control" type="date" />
                        <span asp-validation-for="NewTransaction.Date" class="text-danger"></span>
                    </div>
                    <div class="col-12">
                        <label asp-for="NewTransaction.CategoryId" class="form-label">Category</label>
                        <select asp-for="NewTransaction.CategoryId" class="form-select" asp-items="@Model.Categories"></select>
                        <span asp-validation-for="NewTransaction.CategoryId" class="text-danger"></span>
                    </div>
                    <div class="col-12">
                        <label asp-for="NewTransaction.Amount" class="form-label">Amount</label>
                        <input asp-for="NewTransaction.Amount" class="form-control" type="number" step="0.01" value="@Model.CurrentTransaction.Amount" />
                        <span asp-validation-for="NewTransaction.Amount" class="text-danger"></span>
                    </div>
                    <div class="col-12">
                        <label class="form-label">Currency</label>
                        <select asp-for="SelectedCurrency" asp-items="@Model.Currencies" class="form-select"></select>
                    </div>
                    <div class="col-12">
                        <label asp-for="NewTransaction.Description" class="form-label">Description</label>
                        <input asp-for="NewTransaction.Description" class="form-control" value="@Model.CurrentTransaction.Description"/>
                        <span asp-validation-for="NewTransaction.Description" class="text-danger"></span>
                    </div>
                     <div class="form-check d-flex align-items-center gap-2">
                        @if (Model.CurrentTransaction.IsRecurring)
                        {
                            <input asp-for="NewTransaction.IsRecurring" class="form-check-input" type="checkbox" id="isRecurringCheckbox" checked/>
                        }
                        else
                        {
                            <input asp-for="NewTransaction.IsRecurring" class="form-check-input" type="checkbox" id="isRecurringCheckbox" />
                        }

                        <label class="form-check-label" for="isRecurringCheckbox">Recurring transaction</label>

                            <select asp-for="NewTransaction.RecurrenceInterval" class="form-select" style="display:none; width: auto;" id="recurrenceFrequency">
                            @if (string.Equals(Model.CurrentTransaction.RecurrenceInterval, "daily", StringComparison.OrdinalIgnoreCase))
                            {
                                <option value="Daily" selected>Daily</option>
                            }
                            else
                            {
                                <option value="Daily">Daily</option>
                            }
                            @if (string.Equals(Model.CurrentTransaction.RecurrenceInterval, "weekly", StringComparison.OrdinalIgnoreCase))
                            {
                                <option value="Weekly" selected>Weekly</option>
                            }
                            else
                            {
                                <option value="Weekly">Weekly</option>
                            }
                            @if (string.Equals(Model.CurrentTransaction.RecurrenceInterval, "monthly", StringComparison.OrdinalIgnoreCase))
                            {
                                <option value="Monthly" selected>Monthly</option>
                            }
                            else
                            {
                                <option value="Monthly">Monthly</option>
                            }
                            @if (string.Equals(Model.CurrentTransaction.RecurrenceInterval, "monthly", StringComparison.OrdinalIgnoreCase))
                            {
                                <option value="Yearly" selected>Yearly</option>
                            }
                            else
                            {
                                <option value="Yearly">Yearly</option>
                            }                               
                            </select>
                     </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="editForm" class="btn btn-primary">Save Changes</button>
            </div>
            <div id="modal-error">
                @await Html.PartialAsync("_ErrorPartial")
            </div>

        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const recurringCheckbox = document.getElementById('isRecurringCheckbox');
        const recurrenceFrequency = document.getElementById('recurrenceFrequency');

        if (!recurringCheckbox || !recurrenceFrequency) return;

        // set initial state
        recurrenceFrequency.style.display = recurringCheckbox.checked ? 'inline-block' : 'none';

        recurringCheckbox.addEventListener('change', () => {
            recurrenceFrequency.style.display = recurringCheckbox.checked ? 'inline-block' : 'none';
        });
    });
</script>

